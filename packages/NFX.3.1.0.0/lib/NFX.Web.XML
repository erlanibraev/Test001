<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NFX.Web</name>
    </assembly>
    <members>
        <member name="T:NFX.Web.CacheControl">
            <summary>
            Decorates controller classes or actions that set NoCache headers in response. By default Force = true
            </summary>
        </member>
        <member name="P:NFX.Web.CacheControl.HTTPCacheControl">
            <summary>
            Build standard cache control header from fields
            </summary>
        </member>
        <member name="T:NFX.Web.ContentType">
            <summary>
            Declares web-related/mime content types
            </summary>
        </member>
        <member name="T:NFX.Web.Messaging.MailgunMailerSink">
            <summary>
            Implements mailer sink using Mailgun service
            </summary>
        </member>
        <member name="T:NFX.Web.Messaging.MessageSink">
            <summary>
            Base for ALL implementations that work under MailerService
            </summary>
        </member>
        <member name="T:NFX.Web.Messaging.IMessageSink">
            <summary>
            Marker interface for injection into MailerSerive.Sink property from code
            </summary>
        </member>
        <member name="M:NFX.Web.Messaging.MessageSink.SendMsg(NFX.Web.Messaging.Message)">
            <summary>
            Performs actual sending of msg. This method does not have to be thread-safe as it is called by a single thread
            </summary>
        </member>
        <member name="M:NFX.Web.Messaging.MessageSink.DoSendMsg(NFX.Web.Messaging.Message)">
            <summary>
            Performs actual sending of msg. This method does not have to be thread-safe as it is called by a single thread
            </summary>
        </member>
        <member name="T:NFX.Web.IWebClientCaller">
            <summary>
            Stipulates contract for an entity that executes calls via WebClient
            </summary>
        </member>
        <member name="P:NFX.Web.IWebClientCaller.WebServiceCallTimeoutMs">
            <summary>
            Specifies timeout for web call. If zero then default is used
            </summary>
        </member>
        <member name="P:NFX.Web.IWebClientCaller.KeepAlive">
            <summary>
            Specifies keepalive option for web request
            </summary>
        </member>
        <member name="P:NFX.Web.IWebClientCaller.Pipelined">
            <summary>
            Specifies if pipelining is used for web request
            </summary>
        </member>
        <member name="M:NFX.Web.Messaging.MailgunMailerSink.DoSendMsg(NFX.Web.Messaging.Message)">
            <summary>
            MessageSink DoSendMsg implementation
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="T:NFX.Web.Messaging.MessageService">
            <summary>
            Provides implementation for IMessenger service
            </summary>
        </member>
        <member name="T:NFX.Web.Messaging.IMessenger">
            <summary>
            Describes an entity that can send EMails
            </summary>
        </member>
        <member name="M:NFX.Web.Messaging.MessageService.#ctor">
            <summary>
            Constructs the service. For most-typical cases use MailerService.Instance instead
            </summary>
        </member>
        <member name="M:NFX.Web.Messaging.MessageService.ExternalParametersForGroups(System.String[])">
            <summary>
            Returns named parameters that can be used to control this component
            </summary>
        </member>
        <member name="M:NFX.Web.Messaging.MessageService.ExternalGetParameter(System.String,System.Object@,System.String[])">
            <summary>
            Gets external parameter value returning true if parameter was found
            </summary>
        </member>
        <member name="M:NFX.Web.Messaging.MessageService.ExternalSetParameter(System.String,System.Object,System.String[])">
            <summary>
            Sets external parameter value returning true if parameter was found and set
            </summary>
        </member>
        <member name="P:NFX.Web.Messaging.MessageService.Instance">
            <summary>
            Returns a singleton instance of the default mailer
            </summary>
        </member>
        <member name="P:NFX.Web.Messaging.MessageService.Sink">
            <summary>
            Gets/sets sink that performs sending
            </summary>
        </member>
        <member name="P:NFX.Web.Messaging.MessageService.InstrumentationEnabled">
            <summary>
            Turns instrumentation on/off
            </summary>
        </member>
        <member name="P:NFX.Web.Messaging.MessageService.ExternalParameters">
            <summary>
            Returns named parameters that can be used to control this component
            </summary>
        </member>
        <member name="T:NFX.Web.Messaging.Message">
            <summary>
            Represents an email msg that needs to be sent
            </summary>
        </member>
        <member name="P:NFX.Web.Messaging.Message.Body">
            <summary>
            Plain/text body
            </summary>
        </member>
        <member name="P:NFX.Web.Messaging.Message.HTMLBody">
            <summary>
            HTML-formatted body
            </summary>
        </member>
        <member name="T:NFX.Web.Messaging.NOPMessenger">
            <summary>
            Implements NOP Mailer that does nothing
            </summary>
        </member>
        <member name="T:NFX.Web.Messaging.SMTPMessageSink">
            <summary>
            Implements msg sink based on SMTPClient
            </summary>
        </member>
        <member name="T:NFX.Web.GeoLookup.GeoException">
            <summary>
            Base exception class thrown by geo-related logic
            </summary>
        </member>
        <member name="T:NFX.Web.WebException">
            <summary>
            Base exception class thrown by NFX.WebForms assembly
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.Auth.JsonWebToken">
             <summary>
             JWT (https://developers.google.com/identity/protocols/OAuth2ServiceAccount).
            
             A JWT is composed of three parts: a header, a claim set, and a signature.
             The header and claim set are JSON objects. These JSON objects are serialized to UTF-8 bytes,
             then encoded using the Base64url encoding. This encoding provides resilience against encoding
             changes due to repeated encoding operations. The header, claim set, and signature are concatenated
             together with a period (.) character.
            
             {Base64url encoded header}.{Base64url encoded claim set}.{Base64url encoded signature}
             </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.Auth.JsonWebToken.FromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Workaround to correctly cast the private key as a RSACryptoServiceProvider type 24.
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.Auth.JsonWebToken.Header">
            <summary>
            JWT Header
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.Auth.JsonWebToken.Claimset">
            <summary>
            JWT Claim set
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.GoogleDriveCredentials">
            <summary>
            Google Drive credentials
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.V2.Metadata">
            <summary>
            Google Drive metadata fields
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.GoogleDriveMimeType">
            <summary>
            Google Drive Mime Types
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.GoogleDrivePath">
            <summary>
            Methods for working with paths
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.V2.ApiUrls">
            <summary>
            Google Drive REST API URLs
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient">
            <summary>
            Google Drive REST API wrapper.
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.GetDirectories(System.String,System.Boolean)">
            <summary>
            Returns directory names contained in the spicifed directory
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.GetFiles(System.String,System.Boolean)">
            <summary>
            Returns files contained in the spicifed directory
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.CreateDirectory(System.String,System.String)">
            <summary>
            Creates a directory
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.CreateFile(System.String,System.String)">
            <summary>
            Creates a file
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.CreateFile(System.String,System.String,System.IO.Stream)">
            <summary>
            Creates a file
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.UpdateFile(System.String,System.IO.Stream)">
            <summary>
            Updates content of a file by file ID
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.GetFile(System.String,System.IO.Stream)">
            <summary>
            Gets a file by ID
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.Delete(System.String)">
            <summary>
            Deletes an item
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.SetModifiedDate(System.String,System.DateTime)">
            <summary>
            Sets modification timestamp
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.Rename(System.String,System.String)">
            <summary>
            Renames a file/folder by its ID
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.FileExists(System.String)">
            <summary>
            Checks whether the specified file exists
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.FolderExists(System.String)">
            <summary>
            Checks whether the specified folder exists
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.GetHandle(System.String)">
            <summary>
            Gets a handle for the specified file or folder.
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.TrySend(NFX.Web.HTTPRequestMethod,System.String,System.Uri,System.IO.Stream)">
            <summary>
            Tries to send a request m_NumberOfAttempts of times
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveClient.RefreshAccessToken">
            <summary>
            Refreshes the access token using the refresh token
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveFileSystem">
            <summary>
            Implements FileSystem for Google Drive
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveHandle">
            <summary>
            Google Drive file handle
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.GoogleDrive.V2.GoogleDriveRequestBody">
            <summary>
            Represents a request to Google Drive REST API
            </summary>
        </member>
        <member name="T:NFX.Web.Multipart">
            <summary>
            Faciliates working with multipart encoding
            </summary>
        </member>
        <member name="T:NFX.Web.Multipart.Part">
            <summary>
            Represents a part of multipart encoding
            </summary>
        </member>
        <member name="T:NFX.Web.Multipart.EncodedContent">
            <summary>
            Represents result of multipart encoded content
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.Account">
            <summary>
            Represents an account data vector that is -
            type of account identity (i.e. 'customer'), identity id (i.e. customer number '125') and
            account id within this identity (i.e. ref to customer #125 card '223322.....').
            May also represent temporary web terminal token generated by IWebPayTerminal in which case IsWebTerminalToken = true
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Account.Identity">
            <summary>
            For example 'customer' - name of table.
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Account.IdentityID">
            <summary>
            For example '125' - id of customer table row 125.
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Account.AccountID">
            <summary>
            Account id within identity id domain.
            For example '2' - id of method of payment for customer #125.
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.AccountType">
            <summary>
            Represents account type because some pay services (i.e. Stripe) requires this info
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IActualAccountData">
            <summary>
            Represents actual data for supplied account object.
            Data represented by this interface is ALWAYS TRANSITIVE in memory as
            some fields are either never stored permanently (i.e. CVC) or ciphered in the store (account number)
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IAddress">
            <summary>
            Represents address
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.Address">
            <summary>
            Primitive (maybe temporary) implementation of IAddress
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PaySession">
            <summary>
            Represents session of PaySystem.
            All PaySystem operation requires session as mandatory parameter
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.VerifyPotentialTransaction(NFX.Web.Pay.TransactionType,NFX.Web.Pay.Account,NFX.Web.Pay.Account,NFX.Financial.Amount)">
            <summary>
            Has the same semantics as corresponding PaySystem method executed in context of this session
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.Charge(NFX.Web.Pay.Account,NFX.Web.Pay.Account,NFX.Financial.Amount,System.Boolean,System.String,System.Object)">
            <summary>
            Has the same semantics as corresponding PaySystem method executed in context of this session
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.Transfer(NFX.Web.Pay.Account,NFX.Web.Pay.Account,NFX.Financial.Amount,System.String,System.Object)">
            <summary>
            Has the same semantics as corresponding PaySystem method executed in context of this session
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.Refresh(NFX.Web.Pay.Transaction)">
            <summary>
            Has the same semantics as corresponding PaySystem method executed in context of this session
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.Void(NFX.Web.Pay.Transaction,System.String,System.Object)">
            <summary>
            Has the same semantics as corresponding PaySystem method executed in context of this session
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.Capture(NFX.Web.Pay.Transaction,System.Nullable{System.Decimal},System.String,System.Object)">
            <summary>
            Has the same semantics as corresponding PaySystem method executed in context of this session
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.Refund(NFX.Web.Pay.Transaction,System.Nullable{System.Decimal},System.String,System.Object)">
            <summary>
            Has the same semantics as corresponding PaySystem method executed in context of this session
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySession.GenerateTransactionID(NFX.Web.Pay.TransactionType)">
            <summary>
            Generates new transaction ID for desired pay session and transaction type (Charge, Transfer).
            Context supplies host specific information about this transation i.e. user id
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PaySystem">
            <summary>
            Base class for IPaySystemImplementation implementation.
            Instances of descendants of this class is typically created and configured in PaySystemStarter class.
            Then particular pay system can be obtained from PaySystem.Instances[PAY_SYSTEM_NAME] indexer
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IPaySystemImplementation">
            <summary>
            Describes an entity that can perform pay functions with several usefull interfaces in NFX style
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IPaySystem">
            <summary>
            Describes an entity that can perform pay functions (i.e. charge, transfer)
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.IPaySystem.IsTransactionTypeSupported(NFX.Web.Pay.TransactionType,System.String)">
            <summary>
            Returns true if this system supports transaction type in the specified currency (optional)
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.IPaySystem.StartSession(NFX.Web.Pay.ConnectionParameters,NFX.Web.Pay.IPaySessionContext)">
            <summary>
            Starts new pay session of system-specific type.
            If cParams parameter is null <see cref="P:NFX.Web.Pay.IPaySystem.DefaultSessionConnectParamsCfg"/> is used
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPaySystem.WebTerminal">
            <summary>
            Returns a pay terminal is this payment provider supports it or null
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPaySystem.DefaultSessionConnectParamsCfg">
            <summary>
            Config node of params used inside <see cref="M:NFX.Web.Pay.IPaySystem.StartSession(NFX.Web.Pay.ConnectionParameters,NFX.Web.Pay.IPaySessionContext)"/> method
            if PayConnectionParameters parameter is null
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPaySystem.ChargeFeeKind">
            <summary>
            Processing fee types, such as: included in amount and surcharged.
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPaySystem.TransferFeeKind">
            <summary>
            Processing fee types, such as: included in amount and surcharged.
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPaySystem.SupportedCurrencies">
            <summary>
            Returns currency ISOs that are supported by this isntance. The processing of charges/transafers may be done
            only in these currencies
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPaySystemImplementation.LogLevel">
            <summary>
            Specifies the log level for operations performed by Pay System.
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySystem.___SetPaySystemHost(NFX.Web.Pay.IPaySystemHostImplementation)">
            <summary>
            Sets process-global pay system host used to resolve accounts and transactions.
            If PayStarter is used then the host may be auto-injected from configuration if it is there.
            Developers: Do not call this method as it is used for dependency injection from system code
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySystem.AutoStartSystems">
            <summary>
            Automatically starts systems designated in config with auto-start attribute
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySystem.StartSession(NFX.Web.Pay.ConnectionParameters,NFX.Web.Pay.IPaySessionContext)">
            <summary>
            Starts new pay session of system-specific type
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.PaySystem.PaySystemHost">
            <summary>
            Returns process-global pay system host used to resolve accounts and transactions
            or throws if host is not set. Check IsPaySystemHost to see if host is set.
            This design provides an indirection level between pay systems (like Stripe, PayPal, Bank etc.) and
            particular application data store implementation as it decouples system-internal formats of transaction and
            account storage from provider-internal data (i.e. PayPal payment token string)
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.PaySystem.Instances">
            <summary>
            Returns the read-only registry view of payment systems currently activated
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.PaySystem.InstrumentationEnabled">
            <summary>
            Implements IInstrumentable
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.PaySystem.LogLevel">
            <summary>
            Specifies the log level for operations performed by Pay System.
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IPayWebTerminal">
            <summary>
            Represents a web terminal for pay systems that tokenize sensitive CC data via a call to provider
            so that actual CC numbers never touch our servers in a plain form, instead tokens/nonces are supplied
            back by the provider tokenizer. This is needed for PCI compliance.
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.IPayWebTerminal.GetPayInit">
            <summary>
            Returns client script body that initializes WAVE.Pay by calling WAVE.Pay.init(...) to perform operation
            against the provider.
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPayWebTerminal.PaySystem">
            <summary>
            References pay system that this terminal services
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.ConfigBasedCurrencyMarket">
            <summary>
            Provides rate conversion services based on an APP config file
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.ICurrencyMarket">
            <summary>
            Represents a market that can convert buy/sell currencies
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.ICurrencyMarket.ConvertCurrency(System.String,NFX.Financial.Amount,System.String)">
            <summary>
            Returns conversion rate for source->target conversion.
            rateTable is the name of the rates set, if omitted or not found then default conv rates will be used
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PayPal.PayPalCredentials">
            <summary>
            Represents basic PayPal credentials for registered application
            which include Business account email, client ID and client secret.
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PayPal.PayPalOAuthToken">
            <summary>
            Represents PayPal OAuth token
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PayPal.PayPalSession">
            <summary>
            Represents PayPal pay session
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PayPal.PayPalSystem">
             <summary>
             Represents PayPal (see https://www.paypal.com/) payment service.
            
             NOTE: Before use WebClient, please set in your configuration file
             1. ServicePoint's Expect100Continue to 'false' (100-continue header can reduce performace and is not supported by some web accellerator),
             2. HttpRequest timeout and any other ServicePoint's settings if needeed.
             </summary>
        </member>
        <member name="T:NFX.Web.Pay.Mock.MockCredentials">
            <summary>
            Represents mock credentials (email)
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.Mock.MockSystem">
            <summary>
            Represents mock payment service (can be used for testing).
            Mock provider is driven by card pool configured in 'accounts" section (see sample config in ExternalCfg.LACONF)
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.Mock.PaymentMockException">
            <summary>
            Represents stripe specific payment exception
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PaymentException">
            <summary>
            General NFX payment system specific exception
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.PaySystemWithStaticFees.getCurrencyFee(System.String,NFX.Web.Pay.TransactionType)">
            <summary>
            Returns fee for specified currency and transaction type.
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IPaySystemHost">
            <summary>
            Represents a process-global entity that resolves account handle into actual account data
            and fetches existing transactions.
            This design provides an indirection level between pay systems (like Stripe, PayPal, Bank etc.) and
            particular application data store implementation as it decouples system-internal formats of transaction and
            account storage from provider-internal data (i.e. PayPal payment token string).
            The instance of implementor is a singleton accessible via PaySystem.PaySystemHost
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.IPaySystemHost.FetchTransaction(System.Object)">
            <summary>
            Returns a transaction with specified ID from storage or null
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.IPaySystemHost.FetchAccountData(NFX.Web.Pay.Account)">
            <summary>
            Returns actual data for supplied account object
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.IPaySystemHost.CurrencyMarket">
            <summary>
            Currency market
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IPaySystemHostImplementation">
            <summary>
            Denotes an implementation of IPaySystemHost
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.IPaySessionContext">
            <summary>
            Denotes a context of transaction execution.
            Can be used to provide additional information
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.PaySystemHost.InstrumentationEnabled">
            <summary>
            Implements IInstrumentable
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.PaySystemStarter">
            <summary>
            Represents a starter that launches payment systems on startup
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.Stripe.PaymentStripeException">
            <summary>
            Represents stripe specific payment exception
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Stripe.PaymentStripeException.Compose(System.Net.HttpWebResponse,System.String,System.Exception)">
            <summary>
            Constructs exception composing details from response, method specific error description and actual inner exception
            </summary>
            <param name="response">Response of failed request</param>
            <param name="stripeErrorMessage">Method specific error description</param>
            <param name="inner">Actual inner exception</param>
            <returns>Composed exception</returns>
        </member>
        <member name="T:NFX.Web.Pay.Stripe.StripeCredentials">
            <summary>
            Represents stripe credentials (test and publihsable keys)
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.Stripe.StripeSystem">
            <summary>
            Represents Stripe (see https://stripe.com) payment service.
            Some functions which implement IPaySystem interface don't use all supplied parameters
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Stripe.StripeSystem.DoTransfer(NFX.Web.Pay.PaySession,NFX.Web.Pay.Account,NFX.Web.Pay.Account,NFX.Financial.Amount,System.String,System.Object)">
            <summary>
            Transfers funds from current Stripe account to user account supplied in "to" parameter
            ("from" parameter is not used in Stripe implementation
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Stripe.StripeSystem.DoCharge(NFX.Web.Pay.PaySession,NFX.Web.Pay.Account,NFX.Web.Pay.Account,NFX.Financial.Amount,System.Boolean,System.String,System.Object)">
            <summary>
            Charges funds from credit card to current stripe account.
            Parameter "to" is unused in stripe provider.
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Stripe.StripeSystem.DoCapture(NFX.Web.Pay.PaySession,NFX.Web.Pay.Transaction,System.Nullable{System.Decimal},System.String,System.Object)">
            <summary>
            Captures the payment of this, uncaptured, charge.
            This is the second half og the two-step payment flow, where first you created a charge
            with the capture option set to false.
            Uncaptured payment expires exactly seven days after it is created.
            If a payment is not captured by that pooint of time, it will be marked as refunded and will no longer be capturable.
            If set the amount of capture must be less than or equal to the original amount.
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Stripe.StripeSystem.DoRefund(NFX.Web.Pay.PaySession,NFX.Web.Pay.Transaction,System.Nullable{System.Decimal},System.String,System.Object)">
            <summary>
            If reason/description parameter set, possible values are duplicate, fraudulent, and requested_by_customer
            Developers, don't call this method directly. Call Transaction.Refund instead.
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Stripe.StripeSystem.createRecipient(NFX.Web.Pay.Stripe.StripeSession,NFX.Web.Pay.Account,System.String)">
            <summary>
            Creates new recipient in Stripe system.
            Is used as a temporary entity to substitute recipient parameter in Transfer operation then deleted
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Stripe.StripeSystem.deleteRecipient(NFX.Web.Pay.Stripe.StripeSession,System.String)">
            <summary>
            Deletes existing recipient in Stripe system.
            It is used to delete temporary recipient created to perform Transfer operation
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.TransactionType">
            <summary>
            Denotes transaction types, such as: charges, refunds, transfers
            </summary>
        </member>
        <member name="F:NFX.Web.Pay.TransactionType.Charge">
            <summary>
            Customer paid for some service (i.e. bought some product).
            Funds got withdrawn from customer account (i.e. credit card) into another account (i.e. system account)
            </summary>
        </member>
        <member name="F:NFX.Web.Pay.TransactionType.Transfer">
            <summary>
            Funds were transfered between accounts.
            This mode is usually used to transfer funds between system-internal accounts (i.e. from sales GL account to bank account)
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.TransactionStatus">
            <summary>
            Denotes transaction status
            </summary>
        </member>
        <member name="F:NFX.Web.Pay.TransactionStatus.Promised">
            <summary>
            The transaction was queued for async execution in future. Actual pay system implementation determines whether this status is supported.
            For example this is used for paypal payout where transaction is created instantly in the "promised" status and executed later by a call to Refresh()
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.ProcessingFeeKind">
            <summary>
            Denotes processing fee types, such as: included in amount and surcharged.
            </summary>
        </member>
        <member name="F:NFX.Web.Pay.ProcessingFeeKind.IncludedInAmount">
            <summary>
            Fees are included in amount charged from customers.
            Net amount = amount charged - fees.
            </summary>
        </member>
        <member name="F:NFX.Web.Pay.ProcessingFeeKind.Surcharged">
            <summary>
            Fees are added to amount charged from customers.
            </summary>
        </member>
        <member name="T:NFX.Web.Pay.Transaction">
            <summary>
            Represents an abstraction of financial operation performed with pay system
            </summary>
        </member>
        <member name="M:NFX.Web.Pay.Transaction.#ctor(System.Object,NFX.Web.Pay.TransactionType,NFX.Web.Pay.TransactionStatus,NFX.Web.Pay.Account,NFX.Web.Pay.Account,System.String,System.Object,System.DateTime,NFX.Financial.Amount,System.Nullable{System.Decimal},System.String,System.Object)">
            <summary>
            Framework-only method. Developer shouldn't call it.
            </summary>
            <param name="id">Trasaction ID</param>
            <param name="type">Trasaction type</param>
            <param name="status">Transaction Status</param>
            <param name="from">Source account</param>
            <param name="to">Destination account</param>
            <param name="processorName">Payment processor name which this trasaction belongs to</param>
            <param name="token">Payment processor trasaction of this trasaction</param>
            <param name="createDateUTC">Creation date of this trasaction</param>
            <param name="amount">Amount of this transaction</param>
            <param name="description">Description of this transaction (e.g. "Payment for CPU Intel i7 4470 SandyBridge")</param>
            <param name="fee">Service fee</param>
            <param name="extraData">Some extra data if needed</param>
        </member>
        <member name="M:NFX.Web.Pay.Transaction.__Apply(NFX.Web.Pay.Transaction.Operation)">
            <summary>
            Must be call by PaySystem. Developers do not call internal method
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.ID">
            <summary>
            Unique ID for this transaction instance
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.Processor">
            <summary>
            The name of pay system implementation system that processes this transaction
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.Token">
            <summary>
            A value assigned by a particular pay system implementation.
            This value is parsed and understood by issuing system
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.Date">
            <summary>
            UTC timestamp of this transaction creation
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.Description">
            <summary>
            Textual transaction description
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.Amount">
            <summary>
            Transaction amount - monetary value and currency code.
            Depending on the transaction type can indicate charged amount, refunded amount, transfer amount
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.ExtraData">
            <summary>
            Contains additional data
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.Log">
            <summary>
            Contains log of operations performed on this transaction
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.IsVoided">
            <summary>
            True if transaction was ever voided
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.AmountCaptured">
            <summary>
            Charged amount - monetary value and currency code.
            For charge indicates captured amount in two-step charge scenario.
            Returns zero for uncaptured charges (created with captured flag set to false).
            Returns non-zero amount (typically is equal to original charge amount) for captured amount.
            Returns zero for all other transaction types
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.CanCapture">
            <summary>
            If this transaction can be captured by value less or equal to its initial amount
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.AmountRefunded">
            <summary>
            Transaction amount - monetary value and currency code.
            Indicates refunded amount for charge transaction.
            Can be reflected in child refund transactions when explicit refund performed
            or can be just reminder of partial capture.
            For transactions types other than charge returns zero
            </summary>
        </member>
        <member name="P:NFX.Web.Pay.Transaction.CanRefund">
            <summary>
            If this transaction can be refunded by value less or equal to its initial amount
            </summary>
        </member>
        <member name="T:NFX.Web.GeoLookup.GeoLookupService">
            <summary>
            Represents a service that can lookup country/city names by  domainnames/ip addresses.
            Thehis implementatuion uses free data from: http://dev.maxmind.com/geoip/geoip2/geolite2/.
            Must include MaxMind attribution on the public site that uses this data (see License section on maxmind.com)
            </summary>
        </member>
        <member name="T:NFX.Web.GeoLookup.IGeoLookup">
            <summary>
            Looks-up entities by their ip addr
            </summary>
        </member>
        <member name="M:NFX.Web.GeoLookup.IGeoLookup.Lookup(System.Net.IPAddress)">
            <summary>
            Tries to lookup the geo entitiy by domain IPAddress.
            Returns null when no match could be made
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.IGeoLookup.Available">
            <summary>
            Returns true when the underlying provider is initialized and ready to serve queries
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.IGeoLookup.Resolution">
            <summary>
            Specifies how accurate the lookup is
            </summary>
        </member>
        <member name="M:NFX.Web.GeoLookup.GeoLookupService.Lookup(System.Net.IPAddress)">
            <summary>
            Tries to lookup the location by ip/dns name. Returns null if no match could be made
            </summary>
        </member>
        <member name="M:NFX.Web.GeoLookup.GeoLookupService.CancelStart">
            <summary>
            Cancels service start. This method may be needed when Start() blocks for a long time due to large volumes of data
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.GeoLookupService.Instance">
            <summary>
            Lazily creates the default service instance
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.GeoLookupService.Available">
            <summary>
            Returns true to indoicate that service has loaded and ready to serve data
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.GeoLookupService.DataPath">
            <summary>
            Specifies where the data is
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.GeoLookupService.Resolution">
            <summary>
            Specifies what resolution service provides
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.GeoLookupService.StartCanceled">
            <summary>
            Returns true to indicate that previous attempt to start service - load data, was canceled
            </summary>
        </member>
        <member name="T:NFX.Web.GeoLookup.IPSubnetBlock">
            <summary>
            Provides address segment block information
            </summary>
        </member>
        <member name="T:NFX.Web.GeoLookup.Location">
            <summary>
            Provides location information
            </summary>
        </member>
        <member name="T:NFX.Web.GeoLookup.GeoEntity">
            <summary>
            Represents lookup result
            </summary>
        </member>
        <member name="F:NFX.Web.GeoLookup.GeoEntity.Query">
            <summary>
            Returns the address originally requested
            </summary>
        </member>
        <member name="F:NFX.Web.GeoLookup.GeoEntity.Block">
            <summary>
            Information about IP address block
            </summary>
        </member>
        <member name="F:NFX.Web.GeoLookup.GeoEntity.Location">
            <summary>
            Information about geo location
            </summary>
        </member>
        <member name="P:NFX.Web.GeoLookup.GeoEntity.LocalityName">
            <summary>
            Returns handy name of locality, i.e. "City, Country" if city is available
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.S3.S3Credentials">
            <summary>
            Represents Amazon S3 credentials (access key and secret key)
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSessionConnectParams">
            <summary>
            Provides connection parameters specific for Amazon S3 V4
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSessionConnectParams.Bucket">
            <summary>
            AWS S3 bucket (i.e. bucket01)
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSessionConnectParams.Region">
            <summary>
            AWS S3 bucket region (i.e. us-west-2)
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSessionConnectParams.TimeoutMs">
            <summary>
            Request timeout milliseconds
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSession">
            <summary>
            Provides S3 (v4) file system connection session
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSession.Bucket">
            <summary>
            Amazon S3 bucket (i.e. bucket01)
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSession.Region">
            <summary>
            Amazon S3 region (i.e. us-west-2)
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSession.TimeoutMs">
            <summary>
            Request timeout in milliseconds
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSession.AccessKey">
            <summary>
            Extracts AccessKey from User
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4FileSystemSession.SecretKey">
            <summary>
            Extracts SecretKey from User
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.S3.V4.S3V4FileSystem">
            <summary>
            Implements FileSystem for Amazon S3
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Helpers">
            <summary>
            Implements helpers methods for Amazon S3
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Helpers.GetS3AbsoolutePath(System.Uri)">
            <summary>
            Returns absolute path of S3 Uri
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Helpers.ToHexString(System.Byte[],System.Boolean)">
            <summary>
            Converts byte array into appropriate string hexadecimal representation
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Helpers.S3DateString(System.DateTime)">
            <summary>
            Converts DateTime into appropriate S3 date string representation
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Helpers.S3DateTimeString(System.DateTime)">
            <summary>
            Converts DateTime into appropriate S3 datetime string representation
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Helpers.S3Bytes(System.String)">
            <summary>
            Converts string into UTF8 byte array encoded representation
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer">
            <summary>
            Handles S3V4 signing routines
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.GetCanonicalRequest(System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Returns string representing S3V4 call in canonized form
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.GetStringToSign(System.DateTime,System.String,System.String,System.String)">
            <summary>
            Returns string which must be signed
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.ComputeHash(System.String)">
            <summary>
            Calculates SHA256 hash of given string.
            Returns haxadecimal string representation of hash
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.GetScope(System.DateTime,System.String)">
            <summary>
            Returns "scope" (S3 V4 term) of given region
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.GetScopedSigningKey(System.String,System.DateTime,System.String)">
            <summary>
            Calculates signing key for given secret, timestamp and region
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.ComputeKeyedHash(System.Byte[],System.Byte[])">
            <summary>
            Calculates hash of data by key
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.GetAutorization(System.String,System.String,System.String,System.String)">
            <summary>
            Returns authorization header content
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.AccessKey">
            <summary>
            Call access key
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.SecretKey">
            <summary>
            Call secret key
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.Region">
            <summary>
            Call region
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.Bucket">
            <summary>
            Call bucket
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.ItemLocalPath">
            <summary>
            Call item local path
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.Method">
            <summary>
            Call method (i.e. GET)
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.RequestDateTime">
            <summary>
            Call timestamp
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.QueryParams">
            <summary>
            Call query params
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.ContentStream">
            <summary>
            Call content stream
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.Uri">
            <summary>
            Call Uri (readonly)
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.S3.V4.S3V4Sign.S3V4Signer.Headers">
            <summary>
            Call http headers (readonly)
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.SVNFileSystem">
            <summary>
            Implements FileSystem for SVN.
            WebDAV protocol is used so reading methods only are implemented
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.SVNFileSystemSessionConnectParams">
            <summary>
            Provides connection parameters specific to SVNFIleSystemSession
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.SVNFileSystemSessionConnectParams.ServerURL">
            <summary>
            SVN Server URL i.e. 'http://assembla.com/svn/myRepository'
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.SVNFileSystemSessionConnectParams.TimeoutMs">
            <summary>
            Request timeout milliseconds
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.SVNFileSystemSession">
            <summary>
            Provides SVN file system connection session
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.SVNFileSystemSession.ServerURL">
            <summary>
            SVN Server URL i.e. 'http://assembla.com/svn/myRepository'
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.SVNFileSystemSession.UserID">
            <summary>
            Extracts user ID from User
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.SVNFileSystemSession.UserPassword">
            <summary>
            Extracts user Password from User
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.WebDAV">
            <summary>
            Facilitates read-only tasks with WebDAV compliant SVN server. This class is NOT thread-safe
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.GetVersions(System.String,System.String,System.String)">
            <summary>
            Retrieves a list of versions contained in the remote Dav catalog
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.GetAbsoluteItemPath(NFX.IO.FileSystem.SVN.WebDAV.Item)">
            <summary>
            Returns the absolute path of the item
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.ListVersions(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Lists the specified number of versions contained in remote Dav catalog
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.GetHeadRootVersion">
            <summary>
            Retrieves the latest head version
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.Refresh">
            <summary>
            Refreshes the state of the object by purging cached items (forgets root dir)
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.RootUri">
            <summary>
            The top-most URL of the remote repository
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Root">
            <summary>
            Returns top-level directory as of root Uri mount point
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.UName">
            <summary>
            Gets current user name or empty when user is not set
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.UPwd">
            <summary>
            Gets current user password or empty when user is not set
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.TimeoutMs">
            <summary>
            Gets timeout for call, if zero then actual timeout is taken from WebSettings
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.CurrentVersion">
            <summary>
            Get or sets current version
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.WebDAV.Item">
            <summary>
            General ancestor for items in remote Dav catalog, such as files and directories
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.Item.IsSameName(System.String)">
            <summary>
            Performs case-sensitive name equality test
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Item.Path">
            <summary>
            Returns path relative to root directory
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Item.AbsolutePath">
            <summary>
            Returns absolute path for this item
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Item.Parent">
            <summary>
            Returns parent directory that contains this item or NULL for very root directory
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Item.ContentType">
            <summary>
            Returns content type (e.g. 'text/plainutf-8')
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.WebDAV.Directory">
            <summary>
            Represents a directory in remote Dav catalog
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.Directory.NavigatePath(System.String)">
            <summary>
            Tries to navigate path and returns destination directory, file or null if its not found
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.Directory.Refresh">
            <summary>
            Refreshes the internal status of the directory by purging all cached objects
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Directory.Children">
            <summary>
            Lists subitems contained in this remote Dav directory. Items are fetched lazily and then cached until Refresh() is called
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Directory.Directories">
            <summary>
            Lists subdirectories of this directory
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Directory.Files">
            <summary>
            Lists files contained in this directory
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.Directory.Item(System.String)">
            <summary>
            Gets an item contained in this directory by name be it file or directory. Returns NULL if item with such name does not exist
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.WebDAV.File">
            <summary>
            Represents a file in the remote Dav catalog
            </summary>
        </member>
        <member name="M:NFX.IO.FileSystem.SVN.WebDAV.File.GetContent(System.IO.Stream)">
            <summary>
            Writes contents of the remote file into a stream. No caching is done
            </summary>
        </member>
        <member name="P:NFX.IO.FileSystem.SVN.WebDAV.File.Size">
            <summary>
            Returns 'ContentLength' of this file
            </summary>
        </member>
        <member name="T:NFX.IO.FileSystem.SVN.WebDAV.Version">
            <summary>
            Represents a version of items in the remote Dav catalog
            </summary>
        </member>
        <member name="M:NFX.Web.IO.RFC3986.URLEncode(System.String)">
            <summary>
            Encodes URL string according to RFC3986
            </summary>
        </member>
        <member name="M:NFX.Web.IO.RFC3986.Encode(System.String)">
            <summary>
            Encodes string according to RFC3986
            </summary>
        </member>
        <member name="T:NFX.Web.ServicePointManagerConfigurator">
            <summary>
            Configures ServicePointManager class.
            Use singleton Instance property
            </summary>
        </member>
        <member name="T:NFX.Web.ServicePointManagerConfigurator.OperationPolicy">
            <summary>
            Provides contract and default implementation for certificate trust and endpoint binding
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.IShippingSystemHost">
            <summary>
            Represents a process-global host for a shipping systems
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.IShippingSystemHostImplementation">
            <summary>
            Denotes an implementation of IShippingSystemHost
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.IShippingContext">
            <summary>
            Denotes context for shipping transactions. Can be used to provide additional information
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.IShippingSystem">
            <summary>
            Represents entity that can perform shipping fuctions like labels creation, tracking etc.
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.IShippingSystem.StartSession(NFX.Web.Shipping.ShippingConnectionParameters)">
            <summary>
            Starts shipping session with given or default connection parameters
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.IShippingSystem.CreateLabel(NFX.Web.Shipping.ShippingSession,NFX.Web.Shipping.IShippingContext,NFX.Web.Shipping.Shipment)">
            <summary>
            Creates shipping direct/return label
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.IShippingSystem.TrackShipment(NFX.Web.Shipping.ShippingSession,NFX.Web.Shipping.IShippingContext,System.String,System.String)">
            <summary>
            Retrieves shipment tracking info
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.IShippingSystem.ValidateAddress(NFX.Web.Shipping.ShippingSession,NFX.Web.Shipping.IShippingContext,NFX.Web.Shipping.Address,NFX.Web.Shipping.ValidateShippingAddressException@)">
            <summary>
            Validates shipping address.
            Returns new Address instance which may contain corrected address fields ('New Yourk' -> 'New York')
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.IShippingSystem.GetShippingCarriers(NFX.Web.Shipping.ShippingSession,NFX.Web.Shipping.IShippingContext)">
            <summary>
            Returns all the carriers allowed for the system
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.IShippingSystem.EstimateShippingCost(NFX.Web.Shipping.ShippingSession,NFX.Web.Shipping.IShippingContext,NFX.Web.Shipping.Shipment)">
            <summary>
            Estimates shipping label cost
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.IShippingSystemImplementation">
            <summary>
            Denotes an implementation of IShippingSystem
            </summary>
        </member>
        <member name="P:NFX.Web.Shipping.ShippingCarrier.InnerID">
            <summary>
            inner (NFX) carrier ID
            </summary>
        </member>
        <member name="P:NFX.Web.Shipping.ShippingCarrier.OuterID">
            <summary>
            outer system specific carrier ID
            </summary>
        </member>
        <member name="P:NFX.Web.Shipping.ShippingCarrier.Method.InnerID">
            <summary>
            inner (NFX) carrier ID
            </summary>
        </member>
        <member name="P:NFX.Web.Shipping.ShippingCarrier.Method.OuterID">
            <summary>
            outer system specific carrier ID
            </summary>
        </member>
        <member name="P:NFX.Web.Shipping.ShippingCarrier.Template.InnerID">
            <summary>
            inner (NFX) carrier ID
            </summary>
        </member>
        <member name="P:NFX.Web.Shipping.ShippingCarrier.Template.OuterID">
            <summary>
            outer system specific carrier ID
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.ShippingConnectionParameters">
            <summary>
            Parameters used for connect to API
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.ShippingSession">
            <summary>
            Represents session of ShippingSystem.
            All PaySystem operation requires session as mandatory parameter
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.ShippingSession.CreateLabel(NFX.Web.Shipping.IShippingContext,NFX.Web.Shipping.Shipment)">
            <summary>
            Creates shipping label
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.ShippingSession.TrackShipment(NFX.Web.Shipping.IShippingContext,System.String,System.String)">
            <summary>
            Retrieves shipment tracking info
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.ShippingSession.ValidateAddress(NFX.Web.Shipping.IShippingContext,NFX.Web.Shipping.Address,NFX.Web.Shipping.ValidateShippingAddressException@)">
            <summary>
            Validates shipping address.
            Returns new Address instance which may contain corrected address fields ('New Yourk' -> 'New York')
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.ShippingSession.GetShippingCarriers(NFX.Web.Shipping.IShippingContext)">
            <summary>
            Returns all the carriers allowed for the system
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.ShippingSession.EstimateShippingCost(NFX.Web.Shipping.IShippingContext,NFX.Web.Shipping.Shipment)">
            <summary>
            Estimates shipping label cost
            </summary>
        </member>
        <member name="M:NFX.Web.Shipping.ShippingSystem.___SetShippingSystemHost(NFX.Web.Shipping.IShippingSystemHostImplementation)">
            <summary>
            Sets process-global shipping system host.
            If ShippingSystemStarter is used then the host may be auto-injected from configuration if it is there.
            Developers: Do not call this method as it is used for dependency injection from system code
            </summary>
        </member>
        <member name="P:NFX.Web.Shipping.ShippingSystem.ShippingSystemHost">
            <summary>
            Returns process-global shipping system host
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.ShippingSystemHost">
            <summary>
            Represents a process-global host for a shipping systems
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.ShippingSystemStarter">
            <summary>
            Represents a starter that launches shipping systems on startup
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.TrackStatus">
            <summary>
            Shipping status
            </summary>
        </member>
        <member name="T:NFX.Web.Shipping.TrackInfo">
            <summary>
            Track shipping info
            </summary>
        </member>
        <member name="T:NFX.Web.Social.Facebook">
            <summary>
            Defines constants and helper methods that facilitate Facebook functionality
            </summary>
        </member>
        <member name="T:NFX.Web.Social.SocialNetwork">
            <summary>
            Defines an abstraction for social networks
            </summary>
        </member>
        <member name="T:NFX.Web.Social.ISocialNetwork">
            <summary>
            Describes an entity that can perform social functions (i.e. login, post)
            </summary>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.GetExternalLoginReference(System.String)">
            <summary>
            Returns href to login via social system/site
            </summary>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.GetSpecifiedExternalLoginReference(NFX.Web.Social.SocialUserInfo,System.String)">
            <summary>
            Returns social service login URL for "two-stage" login networks.
            Currently twitter only requires this
            </summary>
            <param name="returnURL">Social site redirects browser here after login</param>
            <param name="userInfo">Context</param>
            <returns>Social site login URL</returns>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.ObtainTokensAndFillInfo(NFX.Web.Social.SocialUserInfo,NFX.Serialization.JSON.JSONDataMap,System.String)">
            <summary>
            Fills user info with values from social network
            </summary>
            <param name="userInfo">Context user info</param>
            <param name="request">Context http request</param>
            <param name="returnURL">Social network login URL (sometimes needed by social site just to ensure correct call)</param>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.RenewLongTermTokens(NFX.Web.Social.SocialUserInfo)">
            <summary>
            Refreshes long term tokens (if provider needs them).
            Should be used in scenario like background server-side token renew routine
            </summary>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.RetrieveUserInfo(NFX.Web.Social.SocialUserInfo)">
            <summary>
            Retrieves all user fields (e.g. screen name, email) but tokens.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.CreateSocialUserInfo(System.Nullable{NFX.Web.Social.SocialUserInfoToken})">
            <summary>
            Create an instance of social user info class.
            If parameters are null then creates new non-logged-in instance, otherwise, if parameters are set,
            then connects to network and tries to re-initializes SocialUser info with fresh data
            from the network (i.e. name, gender etc.) using the supplied net tokens, or throws if tokens are invalid (i.e. expired).
            This returned instance is usually stored in session for later use
            </summary>
            <returns>SocialUserInfo instance</returns>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.GetPictureData(NFX.Web.Social.SocialUserInfo,System.String@,System.String)">
            <summary>
            Returns user profile image data along with content type or null if no image available.
            Picture kind specifies classification of pictures within profile i.e. "main", "small-icon" etc.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.GetPicture(NFX.Web.Social.SocialUserInfo,System.String@,System.String)">
            <summary>
            Returns user profile image or null if no image available.
            Picture kind specifies classification of pictures within profile i.e. "main", "small-icon" etc.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.ISocialNetwork.PostMessage(NFX.Web.Social.SocialUserInfo,System.String)">
            <summary>
            Post message to social network
            </summary>
            <param name="userInfo">Context social user info</param>
            <param name="text">Message to send</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NFX.Web.Social.ISocialNetwork.PrepareReturnURLParameter(System.String,System.Boolean)" -->
        <member name="P:NFX.Web.Social.ISocialNetwork.ID">
            <summary>
            Globally uniquelly identifies social network architype
            </summary>
        </member>
        <member name="P:NFX.Web.Social.ISocialNetwork.Description">
            <summary>
            Provides social network description, this default implementation returns the name of the class
            </summary>
        </member>
        <member name="P:NFX.Web.Social.ISocialNetwork.ServiceURL">
            <summary>
            Returns the root public URL for the service
            </summary>
        </member>
        <member name="P:NFX.Web.Social.ISocialNetwork.CredentialsEntry">
            <summary>
            Specifies how service takes user credentials
            </summary>
        </member>
        <member name="P:NFX.Web.Social.ISocialNetwork.CanPost">
            <summary>
            Defines if a meeesage can be post to this social network
            </summary>
        </member>
        <member name="P:NFX.Web.Social.ISocialNetwork.RequiresSpecifiedExternalLoginReference">
            <summary>
            Specifies if this provider requires to obtain temporary token before redirecting to social network login page.
            Currently only Twitter requires this routine
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.IsAnySocialNetBotUserAgent(System.String)">
            <summary>
            Returns true if the user agent represents a robot from any known social net
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.IsSpecificSocialNetBotUserAgent(NFX.Web.Social.SocialNetID,System.String)">
            <summary>
            Returns true if the user agent represents a robot from the specified social net
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.GetExternalLoginReference(System.String)">
            <summary>
            Returns href to login via social system/site
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.GetSpecifiedExternalLoginReference(NFX.Web.Social.SocialUserInfo,System.String)">
            <summary>
            Returns social service login URL for "two-stage" login networks.
            Currently twitter only requires this
            </summary>
            <param name="returnURL">Social site redirects browser here after login</param>
            <param name="userInfo">Context</param>
            <returns>Social site login URL</returns>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.ObtainTokensAndFillInfo(NFX.Web.Social.SocialUserInfo,NFX.Serialization.JSON.JSONDataMap,System.String)">
            <summary>
            Fills user info with values from social network
            </summary>
            <param name="userInfo">Context user info</param>
            <param name="request">Context http request</param>
            <param name="returnURL">Social network login URL (sometimes needed by social site just to ensure correct call)</param>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.RenewLongTermTokens(NFX.Web.Social.SocialUserInfo)">
            <summary>
            Refreshes long term tokens (if provider needs them).
            Should be used in scenario like background server-side token renew routine
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.RetrieveUserInfo(NFX.Web.Social.SocialUserInfo)">
            <summary>
            Retrieves all user fields (e.g. screen name, email) but tokens.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.CreateSocialUserInfo(System.Nullable{NFX.Web.Social.SocialUserInfoToken})">
            <summary>
            Create an instance of social user info class.
            If parameters are null then creates new non-logged-in instance, otherwise, if parameters are set,
            then connects to network and tries to re-initializes SocialUser info with fresh data
            from the network (i.e. name, gender etc.) using the supplied net tokens, or throws if tokens are invalid (i.e. expired).
            This returned instance is usually stored in session for later use
            </summary>
            <returns>SocialUserInfo instance</returns>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.GetPictureData(NFX.Web.Social.SocialUserInfo,System.String@,System.String)">
            <summary>
            Returns user profile image data along with content type or null if no image available.
            Picture kind specifies classification of pictures within profile i.e. "main", "small-icon" etc.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.GetPicture(NFX.Web.Social.SocialUserInfo,System.String@,System.String)">
            <summary>
            Returns user profile image or null if no image available.
            Picture kind specifies classification of pictures within profile i.e. "main", "small-icon" etc.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialNetwork.PostMessage(NFX.Web.Social.SocialUserInfo,System.String)">
            <summary>
            Post message to social network
            </summary>
            <param name="userInfo">Context social user info</param>
            <param name="text">Message to send</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NFX.Web.Social.SocialNetwork.PrepareReturnURLParameter(System.String,System.Boolean)" -->
        <member name="P:NFX.Web.Social.SocialNetwork.Instances">
            <summary>
            Returns the read-only registry of social networks currently activated
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.InstrumentationEnabled">
            <summary>
            Implements IInstrumentable
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.ID">
            <summary>
            Globally uniquelly identifies social network architype
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.Description">
            <summary>
            Provides social network description, this default implementation returns the name of the class
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.ServiceURL">
            <summary>
            Returns the root public URL for the service
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.CredentialsEntry">
            <summary>
            Specifies how service takes user credentials
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.CanPost">
            <summary>
            Defines if a meeesage can be post to this social network
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.WebServiceCallTimeoutMs">
            <summary>
            Sets timeout for calls to external service that imlements this social network
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.KeepAlive">
            <summary>
            Sets if pipelining should be used for web request
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.Pipelined">
            <summary>
            Sets keepalive option for web request
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialNetwork.RequiresSpecifiedExternalLoginReference">
            <summary>
            Specifies if this provider requires to obtain temporary token before redirecting to social network login page.
            Currently only Twitter requires this routine
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Facebook.Instance">
            <summary>
            Returns a singleton instance of the social network provider
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Facebook.ID">
            <summary>
            Globally uniquelly identifies social network architype
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Facebook.Description">
            <summary>
            Returns service description
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Facebook.CredentialsEntry">
            <summary>
            Specifies how service takes user credentials
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Facebook.ServiceURL">
            <summary>
            Returns the root public URL for the service
            </summary>
        </member>
        <member name="T:NFX.Web.Social.SocialUserInfo">
            <summary>
            Represents social network user common information
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialUserInfo.GetPicture(System.String@,System.String)">
            <summary>
            Returns user profile image or null if no image available.
            Picture kind specifies classification of pictures within profile i.e. "main", "small-icon" etc.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialUserInfo.GetPicture(System.String)">
            <summary>
            Returns user profile image or null if no image available.
            Picture kind specifies classification of pictures within profile i.e. "main", "small-icon" etc.
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialUserInfo.PostMessage(System.String)">
            <summary>
            Posts message to social network
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialUserInfo.SerializeToString">
            <summary>
            Serializes current instance as string, i.e. this may be needed to store the instance in the database VARCHAR column
            </summary>
        </member>
        <member name="M:NFX.Web.Social.SocialUserInfo.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes instance from string, i.e. from database VARCHAR column
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.IssuerNetworkName">
            <summary>
            Returns the name of the network that issued this info, i.e "FacebookOld".
            DO NOT confuse it with network ID. One can obtain netID by getting IssuerSocialNetworkID
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.IssuerNetworkID">
            <summary>
            Returns the SocialNetID for the social network instance that issued this user info object
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.IssuerNetworkDescription">
            <summary>
            Returns the Sociatextual description for the social network instance that issued this user info object
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.ID">
            <summary>
            UserID in appropriate social Network
            Sample ID's are:
              Google+:   100454735382076872928
              Facebook:  100007030231661
              Twitter:   2227913354
              VKontakte: 229735500
              Linked In: h2u4-ixYiC
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.DisplayName">
            <summary>
            Pseudo-field (no social network has this field. It's composed from other fields in specific way for each network.
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.Email">
            <summary>
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.FirstName">
            <summary>
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.LastName">
            <summary>
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.MiddleName">
            <summary>
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.Gender">
            <summary>
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.BirthDate">
            <summary>
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.Locale">
            <summary>
            Locale in form "en-gb".
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.TimezoneOffset">
            <summary>
            UTC offset in seconds.
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.PictureLink">
            <summary>
            Web link to user profile picture ().
            Not all social network supports this field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.LongTermProviderToken">
            <summary>
            Information used to perform social network operations like message post.
            Can be ordinal string (e.g. Facebook) or pair of strings (e.g. Twitter)
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.Token">
            <summary>
            Returns a vector of Network-provided params that can be used to reconstruct SocialUserInfo object
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.LoginState">
            <summary>
            Indicates if user currently logged in
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.LastError">
            <summary>
            Stores last exception of operations for this user
            </summary>
        </member>
        <member name="P:NFX.Web.Social.SocialUserInfo.DebugInfo">
            <summary>
            Social network specific debug info (for example, ID)
            </summary>
        </member>
        <member name="P:NFX.Web.Social.FacebookSocialUserInfo.UserName">
            <summary>
            Facebook user name field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.FacebookSocialUserInfo.AccessToken">
            <summary>
            Token to perform Facebook operations like post (CAN expire in 20 minutes)
            </summary>
        </member>
        <member name="P:NFX.Web.Social.FacebookSocialUserInfo.LongTermAccessToken">
            <summary>
            Token to perform Facebook operations like post (expires in two months)
            </summary>
        </member>
        <member name="T:NFX.Web.Social.GooglePlus">
            <summary>
            Defines constants and helper methods that facilitate GooglePlus functionality
            </summary>
        </member>
        <member name="P:NFX.Web.Social.GooglePlus.Instance">
            <summary>
            Returns a singleton instance of the social network provider
            </summary>
        </member>
        <member name="P:NFX.Web.Social.GooglePlus.ID">
            <summary>
            Globally uniquelly identifies social network architype
            </summary>
        </member>
        <member name="P:NFX.Web.Social.GooglePlus.Description">
            <summary>
            Returns service description
            </summary>
        </member>
        <member name="P:NFX.Web.Social.GooglePlus.CredentialsEntry">
            <summary>
            Specifies how service takes user credentials
            </summary>
        </member>
        <member name="P:NFX.Web.Social.GooglePlus.ServiceURL">
            <summary>
            Returns the root public URL for the service
            </summary>
        </member>
        <member name="P:NFX.Web.Social.GooglePlusSocialUserInfo.UserName">
            <summary>
            Google+ user name field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.GooglePlusSocialUserInfo.AccessToken">
            <summary>
            Token to perform googl+ operations like post
            </summary>
        </member>
        <member name="T:NFX.Web.Social.CredentialsEntryMethod">
            <summary>
            Flags that specify how a network takes user credentials
            </summary>
        </member>
        <member name="F:NFX.Web.Social.CredentialsEntryMethod.None">
            <summary>
            Specifies that the service does not support any forms of security integration
            </summary>
        </member>
        <member name="F:NFX.Web.Social.CredentialsEntryMethod.Browser">
            <summary>
            Specifies that the service only allows users to enter credentials via browser, in a popup or IFrame
            </summary>
        </member>
        <member name="F:NFX.Web.Social.CredentialsEntryMethod.ServerAPI">
            <summary>
            Specifies that the service has server API that a client (web app) can call and pass the credentials
            </summary>
        </member>
        <member name="T:NFX.Web.Social.SocialNetID">
            <summary>
            Globally uniquelly identifies social network architypes
            </summary>
        </member>
        <member name="T:NFX.Web.Social.LinkedIn">
            <summary>
            Defines constants and helper methods that facilitate Facebook functionality
            </summary>
        </member>
        <member name="P:NFX.Web.Social.LinkedIn.Instance">
            <summary>
            Returns a singleton instance of the social network provider
            </summary>
        </member>
        <member name="P:NFX.Web.Social.LinkedIn.ID">
            <summary>
            Globally uniquelly identifies social network architype
            </summary>
        </member>
        <member name="P:NFX.Web.Social.LinkedIn.Description">
            <summary>
            Returns service description
            </summary>
        </member>
        <member name="P:NFX.Web.Social.LinkedIn.CredentialsEntry">
            <summary>
            Specifies how service takes user credentials
            </summary>
        </member>
        <member name="P:NFX.Web.Social.LinkedIn.ServiceURL">
            <summary>
            Returns the root public URL for the service
            </summary>
        </member>
        <member name="P:NFX.Web.Social.LinkedInSocialUserInfo.AccessToken">
            <summary>
            Token to perform Twitter operations like post
            </summary>
        </member>
        <member name="T:NFX.Web.Social.NFXSocialException">
            <summary>
            General NFX social network specific exception
            </summary>
        </member>
        <member name="T:NFX.Web.WebConsts">
            <summary>
            Non-localizable constants
            </summary>
        </member>
        <member name="T:NFX.Web.WebClient">
            <summary>
            Facilitates working with external services provided via HTTP
            </summary>
        </member>
        <member name="T:NFX.Web.WebClient.RequestParams">
            <summary>
            Provides request parameters for making WebClient calls
            </summary>
        </member>
        <member name="T:NFX.Web.WebClient.WebClientTimeouted">
            <summary>
            Provides WebClient functionality with timeout
            </summary>
        </member>
        <member name="T:NFX.Web.Social.SocialLoginState">
            <summary>
            Represents user (as represented by SocialUserInfo object) login states
            </summary>
        </member>
        <member name="F:NFX.Web.Social.SocialLoginState.NotLoggedIn">
            <summary>
            User not connected/logged-in
            </summary>
        </member>
        <member name="F:NFX.Web.Social.SocialLoginState.TokenObtained">
            <summary>
            Social network provider returned access token
            </summary>
        </member>
        <member name="F:NFX.Web.Social.SocialLoginState.LongTermTokenObtained">
            <summary>
            Social network provider returned long term access token
            </summary>
        </member>
        <member name="F:NFX.Web.Social.SocialLoginState.LoggedIn">
            <summary>
            User connected/init with login token and logged-in
            </summary>
        </member>
        <member name="T:NFX.Web.Social.SocialUserInfoToken">
            <summary>
            Represents a vector of Network-provided params that can be used to reconstruct SocialUserInfo object
            </summary>
        </member>
        <member name="T:NFX.Web.Social.Gender">
            <summary>
            Defines gender
            </summary>
        </member>
        <member name="T:NFX.Web.Social.Twitter">
            <summary>
            Defines constants and helper methods that facilitate Twitter functionality
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Twitter.Instance">
            <summary>
            Returns a singleton instance of the social network provider
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Twitter.ID">
            <summary>
            Globally uniquelly identifies social network architype
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Twitter.Description">
            <summary>
            Returns service description
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Twitter.CredentialsEntry">
            <summary>
            Specifies how service takes user credentials
            </summary>
        </member>
        <member name="P:NFX.Web.Social.Twitter.ServiceURL">
            <summary>
            Returns the root public URL for the service
            </summary>
        </member>
        <member name="F:NFX.Web.Social.TwitterSocialUserInfo.ScreenName">
            <summary>
            Twitter screen name field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.TwitterSocialUserInfo.UserName">
            <summary>
            Twitter user name
            </summary>
        </member>
        <member name="P:NFX.Web.Social.TwitterSocialUserInfo.OAuthRequestToken">
            <summary>
            Request token to obtain access token
            </summary>
        </member>
        <member name="P:NFX.Web.Social.TwitterSocialUserInfo.OAuthRequestTokenSecret">
            <summary>
            Token secret to sign query to obtain access token
            </summary>
        </member>
        <member name="P:NFX.Web.Social.TwitterSocialUserInfo.OAuthVerifier">
            <summary>
            Field is used to obtain regular access token
            </summary>
        </member>
        <member name="P:NFX.Web.Social.TwitterSocialUserInfo.OAuthAccessToken">
            <summary>
            Token to perform Twitter operations like post
            </summary>
        </member>
        <member name="P:NFX.Web.Social.TwitterSocialUserInfo.OAuthAccessTokenSecret">
            <summary>
            Token secret to sign Twitter operations like post
            </summary>
        </member>
        <member name="T:NFX.Web.Social.VKontakte">
            <summary>
            Defines constants and helper methods that facilitate VKontakte functionality
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakte.Instance">
            <summary>
            Returns a singleton instance of the social network provider
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakte.ID">
            <summary>
            Globally uniquelly identifies social network architype
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakte.Description">
            <summary>
            Returns service description
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakte.CredentialsEntry">
            <summary>
            Specifies how service takes user credentials
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakte.ServiceURL">
            <summary>
            Returns the root public URL for the service
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakteSocialUserInfo.AccessToken">
            <summary>
            Token to perform VKontakte operations like post
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakteSocialUserInfo.Nickname">
            <summary>
            VKontakte nickname field
            </summary>
        </member>
        <member name="P:NFX.Web.Social.VKontakteSocialUserInfo.Photo">
            <summary>
            VKontakte nickname field
            </summary>
        </member>
        <member name="T:NFX.Web.WebSettings">
            <summary>
            Facilitates fast access to important web-related config settings that update their values when underlying config changes
            </summary>
        </member>
        <member name="M:NFX.Web.WebSettings.RequireInitializedSettings">
            <summary>
            Called by framework components that rely on initialized web settings.
            If the settings have been initialized that this method just does a lock-free check and returns
            </summary>
        </member>
        <member name="P:NFX.Web.WebSettings.SocialNetworks">
            <summary>
            Social network providers currently present in the system
            </summary>
        </member>
        <member name="P:NFX.Web.WebSettings.WebDavLogType">
            <summary>
            When set turns on WebDAV logging
            </summary>
        </member>
        <member name="P:NFX.Web.WebSettings.WebDavDefaultTimeoutMs">
            <summary>
            Sets default timeout for WebDAV requests
            0 means indefinite
            </summary>
        </member>
        <member name="P:NFX.Web.WebSettings.ServicePointManager">
            <summary>
            Provides settings related to Http traffic handling
            </summary>
        </member>
        <member name="T:NFX.Web.Utils">
            <summary>
            Provides various utilities for web technologies
            </summary>
        </member>
        <member name="M:NFX.Web.Utils.DateTimeToHTTPCookieDateTime(System.DateTime)">
            <summary>
            Converts UTC date timne string suitable for use as Cookie expiration filed
            </summary>
        </member>
        <member name="M:NFX.Web.Utils.EscapeJSLiteral(System.String)">
            <summary>
            Escapes JS literal, replacing / \ \r \n " ' &lt; &gt; &amp; chars with their hex codes
            </summary>
        </member>
    </members>
</doc>
